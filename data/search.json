{"list":[{"title":"Condition","link":"<a href=\"Condition.html\">Condition</a>","description":"<p>Base abstract class for all simulation end conditions.\nIt defines the common structure and methods that specific condition types must implement.\nConditions represent criteria that, when met, can trigger the end of a level or simulation phase.</p>"},{"title":"Condition#Condition","link":"<a href=\"Condition_Condition.html\">Condition</a>","description":"<p>Initializes a new instance of a Condition.\nThis constructor should not be called directly on <code>Condition</code> itself, but rather\nthrough <code>super(config)</code> in a subclass.</p>"},{"title":"Condition#dispose","link":"<a href=\"Condition.html#dispose\">dispose</a>","description":"<p>Cleans up any resources created or used by the condition.\nThis method should be overridden by subclasses if they create disposable resources.\nCalled when the condition is no longer needed, for example, when the simulation is reset\nor a new scene is loaded.</p>"},{"title":"Condition#reset","link":"<a href=\"Condition.html#reset\">reset</a>","description":"<p>Resets the condition's state to its initial default values.\nThis method is typically called when the simulation starts or restarts.\nSubclasses may override this to perform additional reset logic.</p>"},{"title":"Condition#update","link":"<a href=\"Condition.html#update\">update</a>","description":"<p>Updates the condition's state based on the current state of the simulation.\nThis method is called on each frame of the simulation when active.\nSubclasses MUST implement this method to define their specific logic for\nchecking criteria and setting the <code>isMet</code> flag.</p>"},{"title":"LeaveZoneEndCondition","link":"<a href=\"LeaveZoneEndCondition.html\">LeaveZoneEndCondition</a>","description":"<p>Condition is met if the target objective (e.g., StayInZoneObjective) is interrupted (meaning zone exit)\nbefore the time limit. If the duration is exceeded and the entity is still in the zone, the condition fails.</p>"},{"title":"LeaveZoneEndCondition#dispose","link":"<a href=\"LeaveZoneEndCondition.html#dispose\">dispose</a>","description":"<p>Performs cleanup when the condition is no longer needed.</p>"},{"title":"LeaveZoneEndCondition#reset","link":"<a href=\"LeaveZoneEndCondition.html#reset\">reset</a>","description":"<p>Resets the condition to its initial state.</p>"},{"title":"LeaveZoneEndCondition#update","link":"<a href=\"LeaveZoneEndCondition.html#update\">update</a>","description":"<p>Updates the condition state.\nWaits for the leaveZone objective to be completed, then starts a timer (duration).\nThe condition is met once the timer has elapsed.</p>"},{"title":"LeaveZoneObjective","link":"<a href=\"LeaveZoneObjective.html\">LeaveZoneObjective</a>","description":"<p>Objective: leave the zone before the time runs out.</p>"},{"title":"LeaveZoneObjective#update","link":"<a href=\"LeaveZoneObjective.html#update\">update</a>","description":"<p>Updates the objective: if the object leaves the zone before time runs out, objective is successful.\nOtherwise, fails if time is up.</p>"},{"title":"MaxHeightEndCondition","link":"<a href=\"MaxHeightEndCondition.html\">MaxHeightEndCondition</a>","description":"<p>An end condition that is met when a target object, tracked by a\n<code>MaxHeightObjective</code>, reaches a specified height, and then a certain delay passes, resetting the timer whenever a new maximum height is reached.</p>"},{"title":"MaxHeightEndCondition#MaxHeightEndCondition","link":"<a href=\"MaxHeightEndCondition_MaxHeightEndCondition.html\">MaxHeightEndCondition</a>","description":"<p>Creates an instance of MaxHeightEndCondition.</p>"},{"title":"MaxHeightObjective","link":"<a href=\"MaxHeightObjective.html\">MaxHeightObjective</a>","description":"<p>An objective that tracks the maximum Y-coordinate (highest point) reached by any\nphysics body whose <code>configId</code> starts with a specified <code>baseTargetId</code>.\nIt displays a visual line in the scene indicating this highest point.\nIn a Y-up coordinate system (like Matter.js default), a higher Y value means a higher point.</p>"},{"title":"MaxHeightObjective#MaxHeightObjective","link":"<a href=\"MaxHeightObjective_MaxHeightObjective.html\">MaxHeightObjective</a>","description":"<p>Creates an instance of MaxHeightObjective.\nInitializes tracking variables and creates a visual line mesh in the scene.</p>"},{"title":"MaxHeightObjective#calculateStars","link":"<a href=\"MaxHeightObjective.html#calculateStars\">calculateStars</a>","description":"<p>Calculates the number of stars earned based on the achieved height and time.\nThis should be called once at the end of the level.</p>"},{"title":"MinHeightObjective","link":"<a href=\"MinHeightObjective.html\">MinHeightObjective</a>","description":"<p>An objective that tracks a &quot;ceiling&quot; height. This ceiling starts at <code>initialHeight</code>\nand can only decrease. The ceiling is lowered if the highest point of any target object\nfalls below the current ceiling.\nIt displays a visual line in the scene indicating this ceiling.</p>"},{"title":"MinHeightObjective#MinHeightObjective","link":"<a href=\"MinHeightObjective_MinHeightObjective.html\">MinHeightObjective</a>","description":"<p>Creates an instance of MinHeightObjective.\nInitializes tracking variables and creates a visual line mesh in the scene.</p>"},{"title":"MinHeightObjective#calculateStars","link":"<a href=\"MinHeightObjective.html#calculateStars\">calculateStars</a>","description":"<p>Calculates stars earned based on how low the ceiling (<code>currentMinYValue</code>) got.</p>"},{"title":"Objective","link":"<a href=\"Objective.html\">Objective</a>","description":"<p>Base abstract class for all simulation objectives.\nIt defines the common structure and methods that specific objective types must implement.\nObjectives represent goals or conditions to be met or tracked within the simulation.</p>"},{"title":"Objective#Objective","link":"<a href=\"Objective_Objective.html\">Objective</a>","description":"<p>Initializes a new instance of an Objective.\nThis constructor should not be called directly on <code>Objective</code> itself, but rather\nthrough <code>super(config)</code> in a subclass.</p>"},{"title":"Objective#dispose","link":"<a href=\"Objective.html#dispose\">dispose</a>","description":"<p>Cleans up any resources created or used by the objective.\nThis method should be overridden by subclasses if they create disposable resources,\nsuch as visual elements in the scene (e.g., meshes, materials).\nCalled when the objective is no longer needed, for example, when the simulation is reset\nor a new scene is loaded.</p>"},{"title":"Objective#getStatus","link":"<a href=\"Objective.html#getStatus\">getStatus</a>","description":"<p>Returns an object representing the current status of the objective.\nThis is typically used by the UI to display information about the objective.</p>"},{"title":"Objective#reset","link":"<a href=\"Objective.html#reset\">reset</a>","description":"<p>Resets the objective's state to its initial default values.\nThis method is typically called when the simulation starts or restarts.\nSubclasses may override this to perform additional reset logic.</p>"},{"title":"Objective#update","link":"<a href=\"Objective.html#update\">update</a>","description":"<p>Updates the objective's state based on the current state of the physics world.\nThis method is called on each frame of the simulation.\nSubclasses MUST implement this method to define their specific logic for\nchecking conditions, updating progress, and setting <code>isComplete</code> or <code>isFailed</code> flags.</p>"},{"title":"StayInZoneEndCondition","link":"<a href=\"StayInZoneEndCondition.html\">StayInZoneEndCondition</a>","description":"<p>An end condition that is met when a specified 'StayInZoneObjective'\nhas been completed, and an additional delay has passed.</p>"},{"title":"StayInZoneEndCondition#StayInZoneEndCondition","link":"<a href=\"StayInZoneEndCondition_StayInZoneEndCondition.html\">StayInZoneEndCondition</a>","description":"<p>Creates an instance of StayInZoneEndCondition.</p>"},{"title":"StayInZoneObjective","link":"<a href=\"StayInZoneObjective.html\">StayInZoneObjective</a>","description":"<p>An objective that requires at least one physics body (whose <code>configId</code> starts\nwith a specified <code>baseTargetId</code>) to remain within a defined rectangular zone for a\ncumulative <code>duration</code>. If all matching targets leave the zone, the timer resets.</p>"},{"title":"StayInZoneObjective#StayInZoneObjective","link":"<a href=\"StayInZoneObjective_StayInZoneObjective.html\">StayInZoneObjective</a>","description":"<p>Creates an instance of StayInZoneObjective.\nInitializes the zone, required duration, and tracking variables.</p>"},{"title":"StayInZoneObjective#calculateStars","link":"<a href=\"StayInZoneObjective.html#calculateStars\">calculateStars</a>","description":"<p>Calculates the number of stars earned based on how quickly the objective was completed.\nThis should be called once at the end of the level.</p>"},{"title":"TimeLimitCondition","link":"<a href=\"TimeLimitCondition.html\">TimeLimitCondition</a>","description":"<p>An end condition that is met after a specified duration of simulation time has passed.</p>"},{"title":"TimeLimitCondition#TimeLimitCondition","link":"<a href=\"TimeLimitCondition_TimeLimitCondition.html\">TimeLimitCondition</a>","description":"<p>Creates an instance of TimeLimitCondition.</p>"},{"title":"TimeLimitCondition#triggerManually","link":"<a href=\"TimeLimitCondition.html#triggerManually\">triggerManually</a>","description":"<p>Manually triggers the condition to be met.\nThis is used when <code>awaitsManualTrigger</code> is true and the user clicks the button.</p>"},{"title":"createEndMenu","link":"<a href=\"global.html#createEndMenu\">createEndMenu</a>","description":"<p>Creates the end-of-level menu UI.\nThis menu typically appears when a level is completed or failed.\nIt will contain a &quot;Restart Level&quot; button, a &quot;Return to Menu&quot; button, and display scores.</p>"},{"title":"createLevelSelectMenu","link":"<a href=\"global.html#createLevelSelectMenu\">createLevelSelectMenu</a>","description":"<p>Creates the level selection menu UI using Babylon.js GUI.</p>"},{"title":"createMainMenu","link":"<a href=\"global.html#createMainMenu\">createMainMenu</a>","description":"<p>Creates the main menu UI using Babylon.js GUI.</p>"},{"title":"disposeEndMenu","link":"<a href=\"global.html#disposeEndMenu\">disposeEndMenu</a>","description":"<p>Disposes of the end menu UI elements.\nRemoves the container and its children from the advanced texture.</p>"},{"title":"hideEndMenu","link":"<a href=\"global.html#hideEndMenu\">hideEndMenu</a>","description":"<p>Hides the end menu.</p>"},{"title":"hideLevelSelectMenu","link":"<a href=\"global.html#hideLevelSelectMenu\">hideLevelSelectMenu</a>","description":"<p>Hides the level selection menu.</p>"},{"title":"hideMainMenu","link":"<a href=\"global.html#hideMainMenu\">hideMainMenu</a>","description":"<p>Hides the main menu.</p>"},{"title":"module:core/historyManager","link":"<a href=\"module-core_historyManager.html\">core/historyManager</a>","description":"<p>Manages the undo/redo history for application states.\nIt provides functions to push new states, undo to previous states,\nredo undone states, clear history, and check if undo/redo operations\nare available. States are deep-copied to prevent unintended modifications.</p>"},{"title":"module:core/historyManager.clearHistory","link":"<a href=\"module-core_historyManager.html#.clearHistory\">clearHistory</a>","description":"<p>Clears the undo and redo history stacks.</p>"},{"title":"module:core/historyManager.hasRedo","link":"<a href=\"module-core_historyManager.html#.hasRedo\">hasRedo</a>","description":"<p>Checks if there is at least one state to redo.</p>"},{"title":"module:core/historyManager.hasUndo","link":"<a href=\"module-core_historyManager.html#.hasUndo\">hasUndo</a>","description":"<p>Checks if there is at least one state to undo.</p>"},{"title":"module:core/historyManager.pushState","link":"<a href=\"module-core_historyManager.html#.pushState\">pushState</a>","description":"<p>Pushes the current state onto the undo stack and clears the redo stack.</p>"},{"title":"module:core/historyManager.redo","link":"<a href=\"module-core_historyManager.html#.redo\">redo</a>","description":"<p>Redoes the last undone action and returns the next state.</p>"},{"title":"module:core/historyManager.undo","link":"<a href=\"module-core_historyManager.html#.undo\">undo</a>","description":"<p>Undoes the last action and returns the previous state.</p>"},{"title":"module:core/historyManager~deepCopy","link":"<a href=\"module-core_historyManager.html#~deepCopy\">deepCopy</a>","description":"<p>Deep copies an object, including arrays and Date objects.\nThis function is used internally by the history manager to ensure\nthat states are stored as independent copies, preventing unintended\nmodifications to past states when the current state changes.</p>"},{"title":"module:core/interactionManager","link":"<a href=\"module-core_interactionManager.html\">core/interactionManager</a>","description":"<p>User interaction management module.\nThis file serves as an entry point for all interaction functionalities.\nIt imports and exports functions from various specialized modules.</p>"},{"title":"module:core/interactions/configManager","link":"<a href=\"module-core_interactions_configManager.html\">core/interactions/configManager</a>","description":"<p>Manages the selection and configuration of scene objects.\nThis module handles highlighting selected objects, displaying a configuration panel\nwith their properties, and restoring their appearance when deselected or when\nconfiguration is cancelled.</p>"},{"title":"module:core/interactions/configManager~cancelConfigSelection","link":"<a href=\"module-core_interactions_configManager.html#~cancelConfigSelection\">cancelConfigSelection</a>","description":"<p>Cancels the current configuration selection.\nClears the highlight from the selected mesh and hides the configuration panel.</p>"},{"title":"module:core/interactions/configManager~clearConfigSelectionHighlight","link":"<a href=\"module-core_interactions_configManager.html#~clearConfigSelectionHighlight\">clearConfigSelectionHighlight</a>","description":"<p>Clears the highlight from the currently selected mesh for configuration, if any.\nRestores its original color and resets selection variables.</p>"},{"title":"module:core/interactions/configManager~getSelectedConfigMesh","link":"<a href=\"module-core_interactions_configManager.html#~getSelectedConfigMesh\">getSelectedConfigMesh</a>","description":"<p>Gets the mesh currently selected for configuration.</p>"},{"title":"module:core/interactions/configManager~selectObjectForConfig","link":"<a href=\"module-core_interactions_configManager.html#~selectObjectForConfig\">selectObjectForConfig</a>","description":"<p>Selects a mesh for configuration.\nIt clears any previous selection, highlights the new mesh, and displays the\nconfiguration panel populated with the object's properties and optional limits.</p>"},{"title":"module:core/interactions/dragManager","link":"<a href=\"module-core_interactions_dragManager.html\">core/interactions/dragManager</a>","description":"<p>Manages the drag-and-drop interactions for physics objects in the scene.\nThis includes creating and managing mouse constraints, highlighting dragged objects,\nhandling temporary state changes (like making other objects static during a drag),\nand applying physics properties like damping and velocity limits during dragging.</p>"},{"title":"module:core/interactions/dragManager~applyRotationToDraggedBody","link":"<a href=\"module-core_interactions_dragManager.html#~applyRotationToDraggedBody\">applyRotationToDraggedBody</a>","description":"<p>Applies a rotational velocity change to the currently dragged body.\nUsed to allow users to rotate objects while dragging them (e.g., via mouse wheel).</p>"},{"title":"module:core/interactions/dragManager~cleanupDrag","link":"<a href=\"module-core_interactions_dragManager.html#~cleanupDrag\">cleanupDrag</a>","description":"<p>Cleans up all resources and states related to dragging.\nThis includes removing any active mouse constraint, restoring original static states\nof bodies, restoring the color of the dragged mesh if any, and resetting all\ndrag-related state variables. Hides the trash can UI.\nThis function is typically called when resetting the simulation or changing modes.</p>"},{"title":"module:core/interactions/dragManager~isBodyBeingDragged","link":"<a href=\"module-core_interactions_dragManager.html#~isBodyBeingDragged\">isBodyBeingDragged</a>","description":"<p>Checks if the specified Matter.js body is currently being dragged.</p>"},{"title":"module:core/interactions/dragManager~startDragOnNewBody","link":"<a href=\"module-core_interactions_dragManager.html#~startDragOnNewBody\">startDragOnNewBody</a>","description":"<p>Initiates dragging for a newly placed body, as if it were picked up.\nSets the dragging state, highlights the mesh, makes other dynamic bodies temporarily static,\nand creates a mouse constraint to control the new body. Also shows the trash can UI.</p>"},{"title":"module:core/interactions/dragManager~startDragging","link":"<a href=\"module-core_interactions_dragManager.html#~startDragging\">startDragging</a>","description":"<p>Starts dragging an existing physics body.\nSets the dragging state, highlights the mesh, temporarily changes the body's mass for smoother dragging,\nmakes other dynamic bodies temporarily static, and creates a mouse constraint.\nAlso shows the trash can UI and detaches camera controls.</p>"},{"title":"module:core/interactions/dragManager~stopDragging","link":"<a href=\"module-core_interactions_dragManager.html#~stopDragging\">stopDragging</a>","description":"<p>Stops the current dragging operation.\nRemoves the mouse constraint, restores the original mass and static states of affected bodies,\nrestores the dragged mesh's original color, re-attaches camera controls,\nand hides the trash can UI. Resets dragging state variables.</p>"},{"title":"module:core/interactions/dragManager~updateDragConstraintTarget","link":"<a href=\"module-core_interactions_dragManager.html#~updateDragConstraintTarget\">updateDragConstraintTarget</a>","description":"<p>Updates the target point (pointB) of the active mouse constraint.\nThis function is called continuously while an object is being dragged. It applies\nangular damping to the dragged body and updates the constraint's target based on\nthe current pointer position, clamping the distance to <code>MAX_INTERACTION_DISTANCE</code>.\nIt also limits the maximum velocity of the dragged body.</p>"},{"title":"module:core/interactions/inputManager","link":"<a href=\"module-core_interactions_inputManager.html\">core/interactions/inputManager</a>","description":"<p>Manages general input handling, including keyboard events for simulation control\nand pointer coordinate conversions. It also tracks the current interaction mode (drag/place)\nand dragging state.</p>"},{"title":"module:core/interactions/inputManager~MAX_INTERACTION_DISTANCE","link":"<a href=\"module-core_interactions_inputManager.html#~MAX_INTERACTION_DISTANCE\">MAX_INTERACTION_DISTANCE</a>","description":"<p>Maximum distance (in world units) the pointer can be from a dragged object's anchor\nbefore the drag target is clamped. This prevents objects from being flung too far.</p>"},{"title":"module:core/interactions/inputManager~PointerInteractionHandler","link":"<a href=\"module-core_interactions_inputManager.html#~PointerInteractionHandler\">PointerInteractionHandler</a>"},{"title":"module:core/interactions/inputManager~ROTATION_VELOCITY_STEP","link":"<a href=\"module-core_interactions_inputManager.html#~ROTATION_VELOCITY_STEP\">ROTATION_VELOCITY_STEP</a>","description":"<p>The increment/decrement value applied to a dragged body's angular velocity\nwhen a rotation input (e.e., mouse wheel) is received.</p>"},{"title":"module:core/interactions/inputManager~attachKeyboardListener","link":"<a href=\"module-core_interactions_inputManager.html#~attachKeyboardListener\">attachKeyboardListener</a>","description":"<p>Attaches a global keyboard listener to the document for simulation control.\nHandles 'Escape' key for cancelling placement and 'Space' key for toggling simulation mode.\nEnsures that the listener is not attached multiple times.</p>"},{"title":"module:core/interactions/inputManager~getInteractionMode","link":"<a href=\"module-core_interactions_inputManager.html#~getInteractionMode\">getInteractionMode</a>","description":"<p>Gets the current interaction mode.</p>"},{"title":"module:core/interactions/inputManager~getIsDragging","link":"<a href=\"module-core_interactions_inputManager.html#~getIsDragging\">getIsDragging</a>","description":"<p>Gets the current dragging state.</p>"},{"title":"module:core/interactions/inputManager~getMatterPointerCoordinates","link":"<a href=\"module-core_interactions_inputManager.html#~getMatterPointerCoordinates\">getMatterPointerCoordinates</a>","description":"<p>Converts Babylon.js pointer coordinates (from screen space) to Matter.js world coordinates.\nThis is achieved by creating a picking ray from the camera through the pointer's screen position\nand finding its intersection with a plane at Z=0 (the 2D physics plane).</p>"},{"title":"module:core/interactions/inputManager~getPointerInteractionCallback","link":"<a href=\"module-core_interactions_inputManager.html#~getPointerInteractionCallback\">getPointerInteractionCallback</a>","description":"<p>Gets the currently set pointer interaction callback function.</p>"},{"title":"module:core/interactions/inputManager~getPointerObserver","link":"<a href=\"module-core_interactions_inputManager.html#~getPointerObserver\">getPointerObserver</a>","description":"<p>Gets the current Babylon.js pointer observer instance.</p>"},{"title":"module:core/interactions/inputManager~handleKeyDown","link":"<a href=\"module-core_interactions_inputManager.html#~handleKeyDown\">handleKeyDown</a>","description":"<p>Handles keydown events on the document.</p>\n<ul>\n<li>If 'Escape' is pressed while in 'place' interaction mode, it cancels the placement.</li>\n<li>If 'Escape' is pressed and a level is active (main menu is hidden), it returns to the main menu.</li>\n<li>If 'Space' is pressed and not currently dragging an object, it toggles the simulation mode (play/pause).</li>\n</ul>"},{"title":"module:core/interactions/inputManager~setInteractionMode","link":"<a href=\"module-core_interactions_inputManager.html#~setInteractionMode\">setInteractionMode</a>","description":"<p>Sets the current interaction mode for pointer interactions.</p>"},{"title":"module:core/interactions/inputManager~setIsDragging","link":"<a href=\"module-core_interactions_inputManager.html#~setIsDragging\">setIsDragging</a>","description":"<p>Sets the flag indicating whether an object is currently being dragged.</p>"},{"title":"module:core/interactions/inputManager~setPointerInteractionCallback","link":"<a href=\"module-core_interactions_inputManager.html#~setPointerInteractionCallback\">setPointerInteractionCallback</a>","description":"<p>Sets the callback function to be invoked by <code>pointerManager.js</code> when pointer interactions occur.\nThis callback is typically provided by <code>simulation.js</code> to handle game logic based on pointer events.</p>"},{"title":"module:core/interactions/inputManager~setPointerObserver","link":"<a href=\"module-core_interactions_inputManager.html#~setPointerObserver\">setPointerObserver</a>","description":"<p>Sets the Babylon.js pointer observer instance.\nThis is typically used by <code>pointerManager.js</code> to store the observer it creates.</p>"},{"title":"module:core/interactions/placementManager","link":"<a href=\"module-core_interactions_placementManager.html\">core/interactions/placementManager</a>","description":"<p>Manages the visual preview and logic for placing new objects into the scene.\nThis includes creating a temporary preview mesh that follows the mouse,\nchecking for collisions and boundary violations at the potential placement location,\nand updating the preview mesh's appearance accordingly.</p>"},{"title":"module:core/interactions/placementManager~hasActivePlacementPreview","link":"<a href=\"module-core_interactions_placementManager.html#~hasActivePlacementPreview\">hasActivePlacementPreview</a>","description":"<p>Checks if a placement preview is currently active (i.e., a preview mesh exists).</p>"},{"title":"module:core/interactions/placementManager~hidePlacementPreview","link":"<a href=\"module-core_interactions_placementManager.html#~hidePlacementPreview\">hidePlacementPreview</a>","description":"<p>Hides and disposes of the current placement preview mesh, if one exists.\nResets placement preview state variables.</p>"},{"title":"module:core/interactions/placementManager~showPlacementPreview","link":"<a href=\"module-core_interactions_placementManager.html#~showPlacementPreview\">showPlacementPreview</a>","description":"<p>Creates and displays a semi-transparent preview mesh at the mouse position,\nrepresenting the object to be placed. Sets the interaction mode to 'place'.\nThe preview mesh's shape and initial color are determined by <code>objectProperties</code>.</p>"},{"title":"module:core/interactions/placementManager~updatePlacementPreview","link":"<a href=\"module-core_interactions_placementManager.html#~updatePlacementPreview\">updatePlacementPreview</a>","description":"<p>Updates the position and appearance of the active placement preview mesh.\nThe mesh follows the provided <code>pointerCoords</code>. Its color changes to\n<code>placementPreviewCollisionColor</code> if a collision is detected at the current\nlocation or if it's outside the defined working bounds. Otherwise, it uses\n<code>placementPreviewOriginalColor</code>.</p>"},{"title":"module:core/interactions/pointerManager","link":"<a href=\"module-core_interactions_pointerManager.html\">core/interactions/pointerManager</a>","description":"<p>Manages pointer (mouse/touch) interactions within the Babylon.js scene.\nThis module is responsible for attaching pointer event listeners and dispatching\nactions based on the event type, current application mode, and interaction mode.\nIt coordinates with dragManager, placementManager, configManager, and simulation\nto handle object dragging, placement, configuration selection, and removal via trash can.</p>"},{"title":"module:core/interactions/pointerManager~attachPointerListener","link":"<a href=\"module-core_interactions_pointerManager.html#~attachPointerListener\">attachPointerListener</a>","description":"<p>Attaches pointer event listeners to the Babylon.js scene using its onPointerObservable.\nIt sets up a callback function (typically from <code>simulation.js</code>) to handle high-level\ninteraction logic based on pointer events. Ensures that any previous pointer observer\nis removed and cleans up any lingering interaction states.</p>"},{"title":"module:core/interactions/pointerManager~cleanupLingering","link":"<a href=\"module-core_interactions_pointerManager.html#~cleanupLingering\">cleanupLingering</a>","description":"<p>Cleans up any lingering interaction-related states or objects.\nThis includes removing active Matter.js mouse constraints, hiding the trash can UI,\nhiding any active placement preview, and clearing configuration selection highlights.\nCalled during <code>attachPointerListener</code> to ensure a clean state.</p>"},{"title":"module:core/interactions/pointerManager~handleConfigClick","link":"<a href=\"module-core_interactions_pointerManager.html#~handleConfigClick\">handleConfigClick</a>","description":"<p>Handles clicks when the application is in 'configuration' mode.\nIf a pickable, non-fixed physics object is clicked, it retrieves the object's\ncurrent properties (mass, friction, restitution) and any configured limits\n(e.g., from its inventory definition). It then calls <code>configManager.selectObjectForConfig</code>\nto highlight the object and display the configuration panel.\nIf empty space or a non-configurable object is clicked, it clears any existing\nconfiguration selection.</p>"},{"title":"module:core/interactions/pointerManager~handleDragEnd","link":"<a href=\"module-core_interactions_pointerManager.html#~handleDragEnd\">handleDragEnd</a>","description":"<p>Handles the end of a drag operation (typically on POINTERUP).\nStops the drag using <code>dragManager.stopDragging</code>. If the object is dropped over\nthe trash can UI and is not fixed, it triggers <code>handleRemoveItem</code> from <code>simulation.js</code>.\nOtherwise, it triggers a configuration update and reload to save the object's new\nposition and angle. Includes error handling and fallback mechanisms.</p>"},{"title":"module:core/interactions/pointerManager~handleDragStart","link":"<a href=\"module-core_interactions_pointerManager.html#~handleDragStart\">handleDragStart</a>","description":"<p>Handles the start of a drag operation (typically on POINTERDOWN).\nIf a pickable, non-static, non-fixed physics object is under the pointer,\nit initiates dragging for that object using <code>dragManager.startDragging</code>.\nPrevents default event behavior to stop camera movement or other interactions.</p>"},{"title":"module:core/interactions/pointerManager~handlePointerEvent","link":"<a href=\"module-core_interactions_pointerManager.html#~handlePointerEvent\">handlePointerEvent</a>","description":"<p>Central handler for all Babylon.js pointer events (POINTERDOWN, POINTERMOVE, POINTERUP, POINTERWHEEL).\nThis function determines the appropriate action based on the current application mode\n(<code>construction</code>, <code>configuration</code>, <code>simulation</code>), interaction mode (<code>drag</code>, <code>place</code>),\nand the type of pointer event.</p>\n<p>Actions include:</p>\n<ul>\n<li>Invoking the main <code>pointerInteractionCallback</code> (from <code>simulation.js</code>) for general handling.</li>\n<li>Updating placement previews during pointer move in 'place' mode.</li>\n<li>Handling object rotation via mouse wheel during drag in 'construction' or 'configuration' modes.</li>\n<li>Initiating object configuration selection on click in 'configuration' mode.</li>\n<li>Managing drag start/end in 'construction' or 'configuration' modes.</li>\n<li>Handling right-click to cancel placement in 'place' mode.</li>\n<li>Cancelling drag if simulation starts while dragging.</li>\n</ul>"},{"title":"module:core/interactions/pointerManager~isNearTrashArea","link":"<a href=\"module-core_interactions_pointerManager.html#~isNearTrashArea\">isNearTrashArea</a>","description":"<p>A simple fallback function to detect if the pointer is near the trash can area.\nThis checks if the pointer's screen coordinates (x, y) are within a 100x100 pixel\narea in the bottom-right corner of the canvas. Used as a secondary check if\n<code>uiManager.isPointerOverTrashCan</code> might not be reliable in all cases.</p>"},{"title":"module:core/interactions/pointerManager~setPointerInteractionCallback","link":"<a href=\"module-core_interactions_pointerManager.html#~setPointerInteractionCallback\">setPointerInteractionCallback</a>","description":"<p>Sets the local pointer interaction callback function for this module.\nThis function is primarily intended to be called by <code>attachPointerListener</code>\nto store the callback provided by <code>simulation.js</code>.</p>"},{"title":"module:core/physicsManager","link":"<a href=\"module-core_physicsManager.html\">core/physicsManager</a>","description":"<p>Manages the Matter.js physics engine, including initialization,\nobject creation (bodies and boundaries), collision handling, and simulation updates.\nIt also handles toggling between working and simulation boundaries and provides\nutility functions for collision checking.</p>"},{"title":"module:core/physicsManager~boundaryCollisionCategory","link":"<a href=\"module-core_physicsManager.html#~boundaryCollisionCategory\">boundaryCollisionCategory</a>","description":"<p>Collision category for boundary objects.</p>"},{"title":"module:core/physicsManager~checkCollisionAt","link":"<a href=\"module-core_physicsManager.html#~checkCollisionAt\">checkCollisionAt</a>","description":"<p>Performs a collision check for a given Matter.Body at a specified target position against a list of other bodies.\nTemporarily moves the body to the target position for the check and then restores its original position and angle.</p>"},{"title":"module:core/physicsManager~checkPlacementCollision","link":"<a href=\"module-core_physicsManager.html#~checkPlacementCollision\">checkPlacementCollision</a>","description":"<p>Checks if placing a new object with given properties at a target position would result in a collision\nwith existing objects in the world.\nA temporary body is created for the check and then removed.</p>"},{"title":"module:core/physicsManager~cleanupPhysics","link":"<a href=\"module-core_physicsManager.html#~cleanupPhysics\">cleanupPhysics</a>","description":"<p>Clears all bodies and constraints from the Matter.js world and resets the engine instance.</p>"},{"title":"module:core/physicsManager~createPhysicsObjects","link":"<a href=\"module-core_physicsManager.html#~createPhysicsObjects\">createPhysicsObjects</a>","description":"<p>Creates Matter.js physical bodies (objects and boundaries) and constraints based on the provided configurations.\nAdds created bodies and constraints to the Matter.js world.</p>"},{"title":"module:core/physicsManager~createPhysicsObjects~createBoundary","link":"<a href=\"module-core_physicsManager.html#~createPhysicsObjects#~createBoundary\">createBoundary</a>","description":"<p>Creates a static rectangular boundary body for the physics world.</p>"},{"title":"module:core/physicsManager~defaultCollisionGroup","link":"<a href=\"module-core_physicsManager.html#~defaultCollisionGroup\">defaultCollisionGroup</a>","description":"<p>Default collision group for objects.</p>"},{"title":"module:core/physicsManager~defaultCollisionMask","link":"<a href=\"module-core_physicsManager.html#~defaultCollisionMask\">defaultCollisionMask</a>","description":"<p>Default collision mask determining what categories collide with each other.</p>"},{"title":"module:core/physicsManager~getPhysicsEngine","link":"<a href=\"module-core_physicsManager.html#~getPhysicsEngine\">getPhysicsEngine</a>","description":"<p>Returns the current Matter.js engine instance.</p>"},{"title":"module:core/physicsManager~getWorldConfig","link":"<a href=\"module-core_physicsManager.html#~getWorldConfig\">getWorldConfig</a>","description":"<p>Returns the last world configuration object used to initialize the physics engine.</p>"},{"title":"module:core/physicsManager~initializePhysics","link":"<a href=\"module-core_physicsManager.html#~initializePhysics\">initializePhysics</a>","description":"<p>Initializes the Matter.js physics engine with the given world configuration.\nSets up gravity, solver iterations, and stores the world configuration.</p>"},{"title":"module:core/physicsManager~lastWorldConfig","link":"<a href=\"module-core_physicsManager.html#~lastWorldConfig\">lastWorldConfig</a>","description":"<p>Stores the last configuration object used to initialize the physics world.</p>"},{"title":"module:core/physicsManager~matterEngine","link":"<a href=\"module-core_physicsManager.html#~matterEngine\">matterEngine</a>","description":"<p>The Matter.js physics engine instance.</p>"},{"title":"module:core/physicsManager~objectCollisionCategory","link":"<a href=\"module-core_physicsManager.html#~objectCollisionCategory\">objectCollisionCategory</a>","description":"<p>Collision category for dynamic/static physics objects.</p>"},{"title":"module:core/physicsManager~setSimulationBoundariesActive","link":"<a href=\"module-core_physicsManager.html#~setSimulationBoundariesActive\">setSimulationBoundariesActive</a>","description":"<p>Toggles the collision properties of working boundaries versus simulation boundaries.\nWhen simulation boundaries are active, working boundaries become sensors (non-colliding), and vice-versa.\nThis allows switching between a &quot;building&quot; or &quot;setup&quot; phase (working boundaries active) and a &quot;simulation&quot; phase.</p>"},{"title":"module:core/physicsManager~updatePhysics","link":"<a href=\"module-core_physicsManager.html#~updatePhysics\">updatePhysics</a>","description":"<p>Advances the physics simulation by a given time step (delta).</p>"},{"title":"module:core/postProcess/bloom","link":"<a href=\"module-core_postProcess_bloom.html\">core/postProcess/bloom</a>","description":"<p>Provides a post-processing bloom effect for enhancing light sources and bright areas.\nThis makes bright lights glow and creates a dreamy atmosphere similar to the visual style\nshown in the reference image with glowing lanterns.</p>"},{"title":"module:core/postProcess/bloom.createBloomPostProcess","link":"<a href=\"module-core_postProcess_bloom.html#.createBloomPostProcess\">createBloomPostProcess</a>","description":"<p>Creates and configures a bloom post-processing effect for the scene.</p>"},{"title":"module:core/postProcess/bloom~bloomSettings","link":"<a href=\"module-core_postProcess_bloom.html#~bloomSettings\">bloomSettings</a>","description":"<p>Default settings for the bloom post-processing effect.\nThese values are used to initialize the bloom effect parameters.</p>"},{"title":"module:core/sceneManager","link":"<a href=\"module-core_sceneManager.html\">core/sceneManager</a>","description":"<p>Manages the Babylon.js scene, including engine setup, camera, lighting,\n3D model loading, mesh creation for physics objects and boundaries, and rendering.\nIt provides functions to initialize and update the visual representation of the simulation,\nhandle pointer events, and control camera interactions.</p>"},{"title":"module:core/sceneManager~Color","link":"<a href=\"module-core_sceneManager.html#~Color\">Color</a>","description":"<p>for highlighting objects during a collision in placement mode.</p>"},{"title":"module:core/sceneManager~Default","link":"<a href=\"module-core_sceneManager.html#~Default\">Default</a>","description":"<p>color for highlighting objects.</p>"},{"title":"module:core/sceneManager~Name","link":"<a href=\"module-core_sceneManager.html#~Name\">Name</a>","description":"<p>of the root node for the 3D bedroom model.</p>"},{"title":"module:core/sceneManager~activeCamera","link":"<a href=\"module-core_sceneManager.html#~activeCamera\">activeCamera</a>","description":"<p>The active camera in the scene.</p>"},{"title":"module:core/sceneManager~attachPointerObservable","link":"<a href=\"module-core_sceneManager.html#~attachPointerObservable\">attachPointerObservable</a>","description":"<p>Attaches an observer to the scene's pointer events.</p>"},{"title":"module:core/sceneManager~babylonEngine","link":"<a href=\"module-core_sceneManager.html#~babylonEngine\">babylonEngine</a>","description":"<p>The Babylon.js engine instance.</p>"},{"title":"module:core/sceneManager~bedroomModelRoot","link":"<a href=\"module-core_sceneManager.html#~bedroomModelRoot\">bedroomModelRoot</a>","description":"<p>Root mesh of the loaded bedroom model.</p>"},{"title":"module:core/sceneManager~bloomEffect","link":"<a href=\"module-core_sceneManager.html#~bloomEffect\">bloomEffect</a>","description":"<p>Reference to the bloom post-processing effect.</p>"},{"title":"module:core/sceneManager~boundaryMeshes","link":"<a href=\"module-core_sceneManager.html#~boundaryMeshes\">boundaryMeshes</a>","description":"<p>Stores arrays of meshes for working and simulation boundaries.</p>"},{"title":"module:core/sceneManager~cameraMouseWheelInput","link":"<a href=\"module-core_sceneManager.html#~cameraMouseWheelInput\">cameraMouseWheelInput</a>","description":"<p>Reference to the camera's mouse wheel input.</p>"},{"title":"module:core/sceneManager~canvas","link":"<a href=\"module-core_sceneManager.html#~canvas\">canvas</a>","description":"<p>The HTML canvas element used for rendering.</p>"},{"title":"module:core/sceneManager~createMeshes","link":"<a href=\"module-core_sceneManager.html#~createMeshes\">createMeshes</a>","description":"<p>Creates Babylon.js visual meshes for dynamic objects and constraints based on their configurations.\nObject meshes are created based on type (box, circle) and properties from <code>objectsConfig</code>.\nConstraint lines are created as visual representations of physical constraints.</p>"},{"title":"module:core/sceneManager~currentScene","link":"<a href=\"module-core_sceneManager.html#~currentScene\">currentScene</a>","description":"<p>The current Babylon.js scene.</p>"},{"title":"module:core/sceneManager~disableCameraControls","link":"<a href=\"module-core_sceneManager.html#~disableCameraControls\">disableCameraControls</a>","description":"<p>Disables camera controls (panning, zooming).</p>"},{"title":"module:core/sceneManager~disposeMeshes","link":"<a href=\"module-core_sceneManager.html#~disposeMeshes\">disposeMeshes</a>","description":"<p>Disposes of all dynamic object meshes and constraint line meshes from the scene.\nStatic boundary meshes are not disposed by this function as they are persistent.</p>"},{"title":"module:core/sceneManager~enableCameraControls","link":"<a href=\"module-core_sceneManager.html#~enableCameraControls\">enableCameraControls</a>","description":"<p>Enables camera controls (panning, zooming).</p>"},{"title":"module:core/sceneManager~findMeshByBody","link":"<a href=\"module-core_sceneManager.html#~findMeshByBody\">findMeshByBody</a>","description":"<p>Finds a Babylon.js mesh that corresponds to a given Matter.js physics body.\nThis relies on a naming convention where the mesh name is <code>mesh-{body.configId}</code>.\nBoundary bodies do not have <code>configId</code> and will return null.</p>"},{"title":"module:core/sceneManager~fpsCounterSpan","link":"<a href=\"module-core_sceneManager.html#~fpsCounterSpan\">fpsCounterSpan</a>","description":"<p>Span element to display FPS.</p>"},{"title":"module:core/sceneManager~frameTimeSpan","link":"<a href=\"module-core_sceneManager.html#~frameTimeSpan\">frameTimeSpan</a>","description":"<p>Span element to display frame time.</p>"},{"title":"module:core/sceneManager~getBloomEffect","link":"<a href=\"module-core_sceneManager.html#~getBloomEffect\">getBloomEffect</a>","description":"<p>Gets the bloom effect instance.</p>"},{"title":"module:core/sceneManager~getCamera","link":"<a href=\"module-core_sceneManager.html#~getCamera\">getCamera</a>","description":"<p>Gets the active Babylon.js camera instance.</p>"},{"title":"module:core/sceneManager~getCanvas","link":"<a href=\"module-core_sceneManager.html#~getCanvas\">getCanvas</a>","description":"<p>Gets the HTML canvas element used for rendering.</p>"},{"title":"module:core/sceneManager~getEngine","link":"<a href=\"module-core_sceneManager.html#~getEngine\">getEngine</a>","description":"<p>Gets the Babylon.js engine instance.</p>"},{"title":"module:core/sceneManager~getScene","link":"<a href=\"module-core_sceneManager.html#~getScene\">getScene</a>","description":"<p>Gets the current Babylon.js scene instance.</p>"},{"title":"module:core/sceneManager~highlightMesh","link":"<a href=\"module-core_sceneManager.html#~highlightMesh\">highlightMesh</a>","description":"<p>Highlights a given mesh by changing its diffuse color.\nStores and returns the original diffuse color of the mesh's material.\nOnly works for StandardMaterial or PBRMaterial.</p>"},{"title":"module:core/sceneManager~initializeBabylon","link":"<a href=\"module-core_sceneManager.html#~initializeBabylon\">initializeBabylon</a>","description":"<p>Initializes the Babylon.js engine and scene.\nSets up the main camera, lighting, a visual back wall, and the render loop.\nAlso initializes UI elements for displaying performance statistics and creates static boundary meshes.\nThis function should be called once at the beginning of the application.</p>"},{"title":"module:core/sceneManager~restoreMeshColor","link":"<a href=\"module-core_sceneManager.html#~restoreMeshColor\">restoreMeshColor</a>","description":"<p>Restores the original diffuse color of a previously highlighted mesh.\nOnly works for StandardMaterial or PBRMaterial.</p>"},{"title":"module:core/sceneManager~setCameraMouseWheelZoomActive","link":"<a href=\"module-core_sceneManager.html#~setCameraMouseWheelZoomActive\">setCameraMouseWheelZoomActive</a>","description":"<p>Activates or deactivates the camera's mouse wheel zoom functionality.\nIt manages the attachment and detachment of the mouse wheel input controller.</p>"},{"title":"module:core/sceneManager~setSimulationMeshesActive","link":"<a href=\"module-core_sceneManager.html#~setSimulationMeshesActive\">setSimulationMeshesActive</a>","description":"<p>Toggles the visibility of the working boundary meshes.\nSimulation boundary meshes remain always visible.</p>"},{"title":"module:core/sceneManager~simTimeSpan","link":"<a href=\"module-core_sceneManager.html#~simTimeSpan\">simTimeSpan</a>","description":"<p>Span element to display simulation time.</p>"},{"title":"module:core/sceneManager~syncMeshesWithConfig","link":"<a href=\"module-core_sceneManager.html#~syncMeshesWithConfig\">syncMeshesWithConfig</a>","description":"<p>Synchronizes Babylon.js visual meshes and constraint lines with the provided configurations.\nUpdates existing meshes, creates new ones, and disposes of meshes no longer in the config.</p>"},{"title":"module:core/sceneManager~updateConstraintLines","link":"<a href=\"module-core_sceneManager.html#~updateConstraintLines\">updateConstraintLines</a>","description":"<p>Updates the visual representation of constraint lines to connect the current positions of their linked bodies.</p>"},{"title":"module:core/sceneManager~updateMeshes","link":"<a href=\"module-core_sceneManager.html#~updateMeshes\">updateMeshes</a>","description":"<p>Updates the positions and rotations of dynamic object meshes to match their corresponding physics bodies.\nStatic boundary meshes are not updated by this function.</p>"},{"title":"module:core/simulation","link":"<a href=\"module-core_simulation.html\">core/simulation</a>","description":"<p>Manages the main simulation lifecycle, including initialization,\nmode transitions (construction, simulation, configuration), physics updates,\nmesh synchronization, UI integration, objective and condition handling,\nand level progression. It serves as the central coordinator for various\nsub-modules like physics, scene rendering, UI, and interactions.</p>"},{"title":"module:core/simulation~Maximum","link":"<a href=\"module-core_simulation.html#~Maximum\">Maximum</a>","description":"<p>number of sub-steps per frame for physics updates.</p>"},{"title":"module:core/simulation~Minimum","link":"<a href=\"module-core_simulation.html#~Minimum\">Minimum</a>","description":"<p>number of sub-steps per frame for physics updates.</p>"},{"title":"module:core/simulation~Number","link":"<a href=\"module-core_simulation.html#~Number\">Number</a>","description":"<p>of sub-steps for physics updates during normal simulation.</p>"},{"title":"module:core/simulation~Number","link":"<a href=\"module-core_simulation.html#~Number\">Number</a>","description":"<p>of sub-steps for physics updates during dragging.</p>"},{"title":"module:core/simulation~Timestep","link":"<a href=\"module-core_simulation.html#~Timestep\">Timestep</a>","description":"<p>for physics updates when the simulation is running normally.</p>"},{"title":"module:core/simulation~Timestep","link":"<a href=\"module-core_simulation.html#~Timestep\">Timestep</a>","description":"<p>for physics updates when an object is being dragged (can be different if needed).</p>"},{"title":"module:core/simulation~activeConditions","link":"<a href=\"module-core_simulation.html#~activeConditions\">activeConditions</a>","description":"<p>Array of active end conditions for the current level.</p>"},{"title":"module:core/simulation~activeObjectives","link":"<a href=\"module-core_simulation.html#~activeObjectives\">activeObjectives</a>","description":"<p>Array of active objectives for the current level.</p>"},{"title":"module:core/simulation~applicationMode","link":"<a href=\"module-core_simulation.html#~applicationMode\">applicationMode</a>","description":"<p>The current application mode (e.g., 'construction', 'simulation', 'configuration').</p>"},{"title":"module:core/simulation~bodies","link":"<a href=\"module-core_simulation.html#~bodies\">bodies</a>","description":"<p>Map of object configIds to their Matter.js Bodies.</p>"},{"title":"module:core/simulation~briefingHasBeenClosedByUser","link":"<a href=\"module-core_simulation.html#~briefingHasBeenClosedByUser\">briefingHasBeenClosedByUser</a>","description":"<p>Flag indicating if the user has closed the briefing panel for the current level.</p>"},{"title":"module:core/simulation~cancelPlacement","link":"<a href=\"module-core_simulation.html#~cancelPlacement\">cancelPlacement</a>","description":"<p>Cancels the current item placement operation.\nHides the placement preview and reverts the interaction mode to 'drag'.</p>"},{"title":"module:core/simulation~constraintLines","link":"<a href=\"module-core_simulation.html#~constraintLines\">constraintLines</a>","description":"<p>Map of constraint indices to their Babylon.js LinesMeshes.</p>"},{"title":"module:core/simulation~currentConfig","link":"<a href=\"module-core_simulation.html#~currentConfig\">currentConfig</a>","description":"<p>The current level configuration object.</p>"},{"title":"module:core/simulation~currentScenePath","link":"<a href=\"module-core_simulation.html#~currentScenePath\">currentScenePath</a>","description":"<p>The path to the current level configuration file.</p>"},{"title":"module:core/simulation~getApplicationMode","link":"<a href=\"module-core_simulation.html#~getApplicationMode\">getApplicationMode</a>","description":"<p>Gets the current application mode.</p>"},{"title":"module:core/simulation~getSimulationTime","link":"<a href=\"module-core_simulation.html#~getSimulationTime\">getSimulationTime</a>","description":"<p>Gets the time taken for the last physics simulation step.</p>"},{"title":"module:core/simulation~handleAddItemRequest","link":"<a href=\"module-core_simulation.html#~handleAddItemRequest\">handleAddItemRequest</a>","description":"<p>Initiates an item placement request from the inventory.\nSets the application mode to 'construction', displays a placement preview for the selected item,\nand sets the interaction mode to 'place'.</p>"},{"title":"module:core/simulation~handleConfigUpdate","link":"<a href=\"module-core_simulation.html#~handleConfigUpdate\">handleConfigUpdate</a>","description":"<p>Handles updates to an object's configurable properties (e.g., mass, friction, restitution)\nfrom the configuration panel. Updates both the physics body and the stored configuration.\nSaves the updated configuration to localStorage.</p>"},{"title":"module:core/simulation~handleManualLevelEndTrigger","link":"<a href=\"module-core_simulation.html#~handleManualLevelEndTrigger\">handleManualLevelEndTrigger</a>","description":"<p>Handles the manual triggering of a level end condition via UI.\nThis function is kept for potential future use or different types of manual triggers,\nbut for TimeLimitCondition, the button now calls condition.triggerManually() directly.</p>"},{"title":"module:core/simulation~handlePlaceItem","link":"<a href=\"module-core_simulation.html#~handlePlaceItem\">handlePlaceItem</a>","description":"<p>Finalizes the placement of an item at the specified world coordinates.\nDecrements the item count in the inventory, creates the physical body and visual mesh\nfor the new object, adds it to the simulation, and saves the updated configuration.</p>"},{"title":"module:core/simulation~handlePointerInteraction","link":"<a href=\"module-core_simulation.html#~handlePointerInteraction\">handlePointerInteraction</a>","description":"<p>Handles pointer (mouse/touch) interactions within the simulation, primarily for item placement.\nIf in 'place' mode and a valid placement location is clicked, it attempts to place the selected item.</p>"},{"title":"module:core/simulation~handlePreviewErrorReload","link":"<a href=\"module-core_simulation.html#~handlePreviewErrorReload\">handlePreviewErrorReload</a>","description":"<p>Handles errors during item preview (e.g., if the preview URL is empty or invalid)\nby reloading the current simulation. This typically occurs if the inventory item\nconfiguration is problematic.</p>"},{"title":"module:core/simulation~handleRemoveItem","link":"<a href=\"module-core_simulation.html#~handleRemoveItem\">handleRemoveItem</a>","description":"<p>Removes an object from the simulation.\nUpdates the configuration, increments the corresponding item count in the inventory (if applicable),\nsaves the configuration, and reloads the simulation.</p>"},{"title":"module:core/simulation~handleRestartLevel","link":"<a href=\"module-core_simulation.html#~handleRestartLevel\">handleRestartLevel</a>","description":"<p>Restarts the current level.\nHides the end menu (if visible) and re-initializes the simulation with the current configuration.</p>"},{"title":"module:core/simulation~initSimulation","link":"<a href=\"module-core_simulation.html#~initSimulation\">initSimulation</a>","description":"<p>Initializes or re-initializes the simulation with a given configuration.\nSets up physics, Babylon.js scene, UI elements, objectives, and conditions.\nCan be used for initial level loading or for reloading after changes (e.g., item placement/removal).</p>"},{"title":"module:core/simulation~initializeConditions","link":"<a href=\"module-core_simulation.html#~initializeConditions\">initializeConditions</a>","description":"<p>Initializes end conditions based on the provided configuration.\nClears any existing conditions and creates new instances for each condition defined in the level config.</p>"},{"title":"module:core/simulation~initializeObjectives","link":"<a href=\"module-core_simulation.html#~initializeObjectives\">initializeObjectives</a>","description":"<p>Initializes objectives based on the provided configuration.\nClears any existing objectives and creates new instances for each objective defined in the level config.</p>"},{"title":"module:core/simulation~isDraggingInPause","link":"<a href=\"module-core_simulation.html#~isDraggingInPause\">isDraggingInPause</a>","description":"<p>Flag indicating if an object is currently being dragged, especially during paused states.</p>"},{"title":"module:core/simulation~isSimulationRunning","link":"<a href=\"module-core_simulation.html#~isSimulationRunning\">isSimulationRunning</a>","description":"<p>Checks if the simulation is currently running in an active gameplay state.</p>"},{"title":"module:core/simulation~itemToPlace","link":"<a href=\"module-core_simulation.html#~itemToPlace\">itemToPlace</a>","description":"<p>The inventory item configuration selected for placement.</p>"},{"title":"module:core/simulation~lastSimulationTime","link":"<a href=\"module-core_simulation.html#~lastSimulationTime\">lastSimulationTime</a>","description":"<p>The duration of the last physics simulation step in milliseconds.</p>"},{"title":"module:core/simulation~levelEnded","link":"<a href=\"module-core_simulation.html#~levelEnded\">levelEnded</a>","description":"<p>Flag indicating if the current level has ended.</p>"},{"title":"module:core/simulation~meshes","link":"<a href=\"module-core_simulation.html#~meshes\">meshes</a>","description":"<p>Map of object configIds to their Babylon.js Meshes.</p>"},{"title":"module:core/simulation~nextItemIdCounter","link":"<a href=\"module-core_simulation.html#~nextItemIdCounter\">nextItemIdCounter</a>","description":"<p>Counter to generate unique IDs for newly placed items.</p>"},{"title":"module:core/simulation~populateSimulation","link":"<a href=\"module-core_simulation.html#~populateSimulation\">populateSimulation</a>","description":"<p>Populates the simulation with physical bodies and visual meshes based on the current configuration.\nThis function is called during <code>initSimulation</code>. If <code>isRestoringOrReloading</code> is true,\nit attempts to synchronize existing meshes with the configuration rather than recreating them all.</p>"},{"title":"module:core/simulation~previousApplicationMode","link":"<a href=\"module-core_simulation.html#~previousApplicationMode\">previousApplicationMode</a>","description":"<p>The application mode before the current 'simulation' mode was entered.</p>"},{"title":"module:core/simulation~returnToMainMenu","link":"<a href=\"module-core_simulation.html#~returnToMainMenu\">returnToMainMenu</a>","description":"<p>Disposes of the current simulation and returns to the main menu.</p>"},{"title":"module:core/simulation~setApplicationMode","link":"<a href=\"module-core_simulation.html#~setApplicationMode\">setApplicationMode</a>","description":"<p>Sets the current application mode (e.g., 'construction', 'simulation', 'configuration').\nManages UI updates, interaction mode changes, and simulation state transitions\nassociated with switching modes.</p>"},{"title":"module:core/simulation~setDraggingState","link":"<a href=\"module-core_simulation.html#~setDraggingState\">setDraggingState</a>","description":"<p>Sets the state indicating whether an object is currently being dragged,\nparticularly for managing physics updates during paused states.</p>"},{"title":"module:core/simulation~simulationLoop","link":"<a href=\"module-core_simulation.html#~simulationLoop\">simulationLoop</a>","description":"<p>The main simulation loop, executed on every frame.\nUpdates physics, synchronizes meshes, and manages game logic like objectives and conditions\nbased on the current application mode.</p>"},{"title":"module:core/simulation~toggleSimulationMode","link":"<a href=\"module-core_simulation.html#~toggleSimulationMode\">toggleSimulationMode</a>","description":"<p>Toggles the simulation mode between 'simulation' and the previous mode (construction/configuration).\nIf the level has ended and the mode is 'simulation', it restarts the level.</p>"},{"title":"module:core/simulation~totalSimulationTimeElapsed","link":"<a href=\"module-core_simulation.html#~totalSimulationTimeElapsed\">totalSimulationTimeElapsed</a>","description":"<p>Total time elapsed in simulation mode for the current run, in seconds.</p>"},{"title":"module:core/simulation~triggerConfigUpdateAndReload","link":"<a href=\"module-core_simulation.html#~triggerConfigUpdateAndReload\">triggerConfigUpdateAndReload</a>","description":"<p>Updates the configuration of an object (position, angle) after an interaction (e.g., drag completion)\nand reloads the simulation to reflect the changes.\nSaves the updated configuration to localStorage.</p>"},{"title":"module:core/simulation~triggerLevelEnd","link":"<a href=\"module-core_simulation.html#~triggerLevelEnd\">triggerLevelEnd</a>","description":"<p>Triggers the end of the level when a condition is met.\nSets the <code>levelEnded</code> flag, calculates scores/stars for objectives,\nattempts to unlock the next level if all objectives are complete, and shows the end menu.</p>"},{"title":"module:core/soundManager","link":"<a href=\"module-core_soundManager.html\">core/soundManager</a>","description":"<p>Manages procedural sound generation for the application.</p>"},{"title":"module:core/soundManager~createImpulseResponse","link":"<a href=\"module-core_soundManager.html#~createImpulseResponse\">createImpulseResponse</a>","description":"<p>Creates a simple synthetic impulse response for the reverb.</p>"},{"title":"module:core/soundManager~initAudio","link":"<a href=\"module-core_soundManager.html#~initAudio\">initAudio</a>","description":"<p>Initializes the Web Audio API AudioContext and the main audio graph.</p>"},{"title":"module:core/soundManager~playCollisionSound","link":"<a href=\"module-core_soundManager.html#~playCollisionSound\">playCollisionSound</a>","description":"<p>Plays a procedurally generated collision sound with filter and reverb.</p>"},{"title":"module:core/soundManager~setSoundEffectsVolume","link":"<a href=\"module-core_soundManager.html#~setSoundEffectsVolume\">setSoundEffectsVolume</a>","description":"<p>Sets the master volume for all sound effects.</p>"},{"title":"module:core/ui/briefingPanel","link":"<a href=\"module-core_ui_briefingPanel.html\">core/ui/briefingPanel</a>","description":"<p>Manages the display of a briefing image panel at the start of a level.</p>"},{"title":"module:core/ui/briefingPanel~createBriefingPanel","link":"<a href=\"module-core_ui_briefingPanel.html#~createBriefingPanel\">createBriefingPanel</a>","description":"<p>Creates the briefing panel UI.</p>"},{"title":"module:core/ui/briefingPanel~disposeBriefingPanel","link":"<a href=\"module-core_ui_briefingPanel.html#~disposeBriefingPanel\">disposeBriefingPanel</a>","description":"<p>Disposes of the briefing panel UI elements.</p>"},{"title":"module:core/ui/briefingPanel~hideBriefingPanel","link":"<a href=\"module-core_ui_briefingPanel.html#~hideBriefingPanel\">hideBriefingPanel</a>","description":"<p>Hides the briefing panel.</p>"},{"title":"module:core/ui/briefingPanel~showBriefingPanel","link":"<a href=\"module-core_ui_briefingPanel.html#~showBriefingPanel\">showBriefingPanel</a>","description":"<p>Shows the briefing panel.</p>"},{"title":"module:core/ui/configPanel","link":"<a href=\"module-core_ui_configPanel.html\">core/ui/configPanel</a>","description":"<p>Manages the creation and interaction of the object configuration panel.\nThis panel allows users to adjust properties like mass, friction, and restitution\nfor a selected physics object. It uses Babylon.js GUI controls.</p>"},{"title":"module:core/ui/configPanel~createConfigPanel","link":"<a href=\"module-core_ui_configPanel.html#~createConfigPanel\">createConfigPanel</a>","description":"<p>Creates the configuration panel GUI elements.\nThe panel is initially hidden and includes sliders and text displays for mass,\nfriction, and restitution, along with a close button.</p>"},{"title":"module:core/ui/configPanel~hideConfigPanel","link":"<a href=\"module-core_ui_configPanel.html#~hideConfigPanel\">hideConfigPanel</a>","description":"<p>Hides the configuration panel.\nAlso clears the <code>configObjectId</code> and calls <code>clearConfigSelectionHighlight</code>\nto remove any visual highlight from the configured object in the scene.</p>"},{"title":"module:core/ui/configPanel~showConfigPanel","link":"<a href=\"module-core_ui_configPanel.html#~showConfigPanel\">showConfigPanel</a>","description":"<p>Shows the configuration panel and populates it with the properties of the selected object.\nIt adjusts the min/max values of the sliders based on the provided <code>limits</code> or defaults.\nThe current values of the object's properties are set on the sliders.</p>"},{"title":"module:core/ui/hintPanel","link":"<a href=\"module-core_ui_hintPanel.html\">core/ui/hintPanel</a>","description":"<p>Manages the display of a hint image panel.</p>"},{"title":"module:core/ui/hintPanel~createHintPanel","link":"<a href=\"module-core_ui_hintPanel.html#~createHintPanel\">createHintPanel</a>","description":"<p>Creates the hint panel UI.</p>"},{"title":"module:core/ui/hintPanel~disposeHintPanel","link":"<a href=\"module-core_ui_hintPanel.html#~disposeHintPanel\">disposeHintPanel</a>","description":"<p>Disposes of the hint panel UI elements.</p>"},{"title":"module:core/ui/hintPanel~hideHintPanel","link":"<a href=\"module-core_ui_hintPanel.html#~hideHintPanel\">hideHintPanel</a>","description":"<p>Hides the hint panel.</p>"},{"title":"module:core/ui/hintPanel~showHintPanel","link":"<a href=\"module-core_ui_hintPanel.html#~showHintPanel\">showHintPanel</a>","description":"<p>Shows the hint panel.</p>"},{"title":"module:core/ui/inventoryPanel","link":"<a href=\"module-core_ui_inventoryPanel.html\">core/ui/inventoryPanel</a>","description":"<p>Manages the creation and dynamic updating of the inventory panel UI.\nThe inventory panel displays items available for placement, showing a 3D preview,\nname, and count for each item. It allows users to select items to place into the simulation.</p>"},{"title":"module:core/ui/inventoryPanel~createInventoryUI","link":"<a href=\"module-core_ui_inventoryPanel.html#~createInventoryUI\">createInventoryUI</a>","description":"<p>Creates the basic structure of the inventory UI, including the header and the main panel\nwhere inventory items will be displayed. This function sets up the static parts of the inventory UI.\nThe actual inventory items are populated by <code>updateUIContent</code>.</p>"},{"title":"module:core/ui/inventoryPanel~updateUIContent","link":"<a href=\"module-core_ui_inventoryPanel.html#~updateUIContent\">updateUIContent</a>","description":"<p>Dynamically updates the content of the inventory panel based on the provided configuration.\nIt clears existing inventory items and then repopulates the panel with new items,\ngenerating 3D preview textures for each. If preview generation populates the cache or\nresults in an empty image, it triggers the <code>onPreviewErrorRequiresReload</code> callback.</p>"},{"title":"module:core/ui/menuBar","link":"<a href=\"module-core_ui_menuBar.html\">core/ui/menuBar</a>","description":"<p>Manages the creation and state of the top menu bar UI.\nThis menu bar typically contains buttons to switch between different application modes\n(e.g., 'construction', 'configuration', 'simulation').</p>"},{"title":"module:core/ui/menuBar~createTopMenuBar","link":"<a href=\"module-core_ui_menuBar.html#~createTopMenuBar\">createTopMenuBar</a>","description":"<p>Creates the top menu bar with buttons for switching application modes.\nIf a menu bar already exists, it is disposed of and recreated.\nThe buttons are styled and configured to call <code>modeChangeCallback</code> when clicked.\nThe <code>initialMode</code> button is highlighted.</p>"},{"title":"module:core/ui/menuBar~updateTopMenuBar","link":"<a href=\"module-core_ui_menuBar.html#~updateTopMenuBar\">updateTopMenuBar</a>","description":"<p>Updates the visual state of the mode buttons in the top menu bar to reflect the currently active mode.\nThe button corresponding to <code>activeMode</code> is highlighted (e.g., different background color),\nwhile other mode buttons are set to an inactive style.</p>"},{"title":"module:core/ui/objectPreview","link":"<a href=\"module-core_ui_objectPreview.html\">core/ui/objectPreview</a>","description":"<p>Provides functionality to generate 2D preview images (as data URLs)\nof 3D objects. These previews are typically used in UI elements like inventory panels.\nIt utilizes Babylon.js RenderTargetTexture (RTT) for off-screen rendering and\nincludes a localStorage-based caching mechanism to improve performance.</p>"},{"title":"module:core/ui/objectPreview~createPreviewTexture","link":"<a href=\"module-core_ui_objectPreview.html#~createPreviewTexture\">createPreviewTexture</a>","description":"<p>Creates a 2D preview texture (as a data URL) for a given inventory item.\nIt first checks localStorage for a cached version of the preview. If not found,\nit generates a new preview by:</p>\n<ol>\n<li>Creating a <code>RenderTargetTexture</code> (RTT).</li>\n<li>Setting up a dedicated orthographic camera for the RTT.</li>\n<li>Creating a temporary 3D mesh based on <code>itemData.objectProperties</code> (type, dimensions, color).\nThe mesh is scaled to fit within a normalized preview size.</li>\n<li>Rendering this mesh to the RTT.</li>\n<li>Reading the pixel data from the RTT and converting it to a PNG data URL.</li>\n<li>Storing the new data URL in localStorage for future use.</li>\n</ol>\n<p>The function handles potential errors during rendering or localStorage access and\ncleans up temporary Babylon.js resources (RTT, camera, mesh).</p>"},{"title":"module:core/ui/objectivesPanel","link":"<a href=\"module-core_ui_objectivesPanel.html\">core/ui/objectivesPanel</a>","description":"<p>Manages the creation, updating, and disposal of the objectives and manual end conditions display panel.</p>"},{"title":"module:core/ui/objectivesPanel~createObjectivesPanel","link":"<a href=\"module-core_ui_objectivesPanel.html#~createObjectivesPanel\">createObjectivesPanel</a>","description":"<p>Creates the objectives and manual end conditions display panel.</p>"},{"title":"module:core/ui/objectivesPanel~disposeObjectivesPanel","link":"<a href=\"module-core_ui_objectivesPanel.html#~disposeObjectivesPanel\">disposeObjectivesPanel</a>","description":"<p>Disposes of the objectives panel UI elements.</p>"},{"title":"module:core/ui/objectivesPanel~updateObjectivesPanel","link":"<a href=\"module-core_ui_objectivesPanel.html#~updateObjectivesPanel\">updateObjectivesPanel</a>","description":"<p>Updates the objectives panel to reflect current statuses and manual trigger buttons.</p>"},{"title":"module:core/ui/trashCan","link":"<a href=\"module-core_ui_trashCan.html\">core/ui/trashCan</a>","description":"<p>Manages the creation, visibility, and interaction detection for a trash can UI element.\nThis UI element allows users to drag and drop objects onto it to remove them from the simulation.</p>"},{"title":"module:core/ui/trashCan~createTrashCan","link":"<a href=\"module-core_ui_trashCan.html#~createTrashCan\">createTrashCan</a>","description":"<p>Creates the trash can GUI element.\nThe trash can is a <code>GUI.Rectangle</code> styled to look like a trash area, initially hidden.\nIt includes hover effects to change its appearance when the pointer is over it.\nIf a trash can control already exists, it is disposed of and recreated.</p>"},{"title":"module:core/ui/trashCan~hideTrashCan","link":"<a href=\"module-core_ui_trashCan.html#~hideTrashCan\">hideTrashCan</a>","description":"<p>Hides the trash can UI element.\nIf the <code>trashCanControl</code> has not been created, a warning is logged.</p>"},{"title":"module:core/ui/trashCan~isPointerOverTrashCan","link":"<a href=\"module-core_ui_trashCan.html#~isPointerOverTrashCan\">isPointerOverTrashCan</a>","description":"<p>Checks if the given screen coordinates (pointerX, pointerY) are within the bounds\nof the visible trash can UI element.\nThis function manually calculates the absolute screen bounds of the trash can control\nbased on its <code>_currentMeasure</code> property and compares them with the pointer coordinates.\nIt also logs a comparison with the native <code>contains</code> method for debugging.</p>"},{"title":"module:core/ui/trashCan~showTrashCan","link":"<a href=\"module-core_ui_trashCan.html#~showTrashCan\">showTrashCan</a>","description":"<p>Makes the trash can UI element visible.\nIf the <code>trashCanControl</code> has not been created, a warning is logged.</p>"},{"title":"module:core/ui/uiCore","link":"<a href=\"module-core_ui_uiCore.html\">core/ui/uiCore</a>","description":"<p>Provides core functionalities and shared resources for the UI system.\nThis includes managing the main <code>AdvancedDynamicTexture</code> for GUI elements,\na primary <code>StackPanel</code> for organizing UI sections, and a utility for disposing\nof the entire UI. It also exports a placeholder image URL for error states.</p>"},{"title":"module:core/ui/uiCore~disposeUI","link":"<a href=\"module-core_ui_uiCore.html#~disposeUI\">disposeUI</a>","description":"<p>Disposes of the entire UI system.\nIf the <code>advancedTexture</code> exists, it is disposed of, which in turn disposes all\nGUI controls attached to it. Module-level references to <code>advancedTexture</code> and <code>uiPanel</code>\nare then reset to <code>null</code>.</p>"},{"title":"module:core/ui/uiCore~emptyImageUrl","link":"<a href=\"module-core_ui_uiCore.html#~emptyImageUrl\">emptyImageUrl</a>","description":"<p>A base64 encoded data URL for a transparent 128x128 PNG image.\nUsed as a placeholder or fallback when an image preview cannot be generated or is empty,\nhelping to identify issues with image generation or caching.</p>"},{"title":"module:core/ui/uiCore~getAdvancedTexture","link":"<a href=\"module-core_ui_uiCore.html#~getAdvancedTexture\">getAdvancedTexture</a>","description":"<p>Retrieves or initializes the main <code>AdvancedDynamicTexture</code> for the UI.\nIf the texture does not exist, it creates a fullscreen UI texture attached to the\nlast created Babylon.js scene. It also sets up an observer to update the\ntexture's ideal dimensions on engine resize to maintain 1:1 pixel mapping for previews.</p>"},{"title":"module:core/ui/uiCore~getMainPanel","link":"<a href=\"module-core_ui_uiCore.html#~getMainPanel\">getMainPanel</a>","description":"<p>Retrieves or initializes the main UI panel (<code>GUI.StackPanel</code>).\nThis panel serves as a primary container for major UI sections (e.g., inventory, objectives).\nIf the panel already exists, it is removed from the <code>advancedTexture</code> and recreated\nto ensure a clean state.</p>"},{"title":"module:core/uiManager","link":"<a href=\"module-core_uiManager.html\">core/uiManager</a>","description":"<p>Manages the overall UI by coordinating various UI component modules.\nThis module serves as a central point for creating, updating, and disposing of UI elements\nsuch as inventory, menu bar, configuration panel, trash can, and objectives panel.\nIt re-exports functions from these specialized UI modules.</p>"},{"title":"module:core/uiManager~disposeUI","link":"<a href=\"module-core_uiManager.html#~disposeUI\">disposeUI</a>","description":"<p>Disposes of all UI elements managed by the <code>uiManager</code>.\nThis function calls the respective disposal functions for each UI component\n(e.g., objectives panel) and then calls the core UI disposal function\nto clean up shared resources like the main GUI texture.</p>"},{"title":"module:index","link":"<a href=\"module-index.html\">index</a>","description":"<p>Entry point for the Dreamland Physics application.\nThis module handles the initial setup of the UI, loading of scene configurations,\nand initialization of the main simulation. It listens for the DOMContentLoaded event\nto start the application.</p>"},{"title":"module:musicPlayer","link":"<a href=\"module-musicPlayer.html\">musicPlayer</a>","description":"<p>Handles the background music playback for the application.</p>"},{"title":"module:musicPlayer.setMusicVolume","link":"<a href=\"module-musicPlayer.html#.setMusicVolume\">setMusicVolume</a>","description":"<p>Sets the volume for the background music.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer\">setupBackgroundMusicPlayer</a>","description":"<p>Sets up the background music player.\nFetches a list of music tracks from 'assets/music/music-manifest.json',\ncreates an audio element, and plays tracks randomly in a loop.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer~addInteractionListeners","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer#~addInteractionListeners\">addInteractionListeners</a>","description":"<p>Adds event listeners for the first user interaction to enable audio playback.\nThis is necessary due to browser autoplay policies.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer~attemptPlay","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer#~attemptPlay\">attemptPlay</a>","description":"<p>Attempts to play the audio if a source is set and it's currently paused.\nHandles autoplay restrictions by adding interaction listeners if playback fails.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer~handleFirstInteraction","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer#~handleFirstInteraction\">handleFirstInteraction</a>","description":"<p>Handles the first user interaction by attempting to play the audio.\nCalled once by the interaction event listeners.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer~playRandomTrack","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer#~playRandomTrack\">playRandomTrack</a>","description":"<p>Selects and plays a random track from the available music tracks.\nSets the audio source and then attempts to play it.</p>"},{"title":"module:musicPlayer.setupBackgroundMusicPlayer~removeInteractionListeners","link":"<a href=\"module-musicPlayer.html#.setupBackgroundMusicPlayer#~removeInteractionListeners\">removeInteractionListeners</a>","description":"<p>Removes event listeners for user interaction if they were active.\nTypically, {once: true} listeners remove themselves, but this ensures cleanup.</p>"},{"title":"module:musicPlayer~audio","link":"<a href=\"module-musicPlayer.html#~audio\">audio</a>","description":"<p>Reference to the audio element used for music playback.</p>"},{"title":"module:utils/configLoader","link":"<a href=\"module-utils_configLoader.html\">utils/configLoader</a>","description":"<p>Provides functionality to load scene configurations from JSON files\nor use a default configuration if a specific scene path is not provided or fails to load.</p>"},{"title":"module:utils/configLoader~defaultConfig","link":"<a href=\"module-utils_configLoader.html#~defaultConfig\">defaultConfig</a>","description":"<p>A default scene configuration object used as a fallback.\nIncludes basic world properties, a couple of default objects, and a default inventory item.</p>"},{"title":"module:utils/configLoader~loadSceneConfig","link":"<a href=\"module-utils_configLoader.html#~loadSceneConfig\">loadSceneConfig</a>","description":"<p>Asynchronously loads a scene configuration from a specified JSON file path.\nIf <code>scenePath</code> is not provided or if loading fails, it falls back to a deep copy of <code>defaultConfig</code>.\nEnsures that the loaded or default configuration object has essential top-level keys\n(<code>world</code>, <code>objects</code>, <code>constraints</code>, <code>inventory</code>).</p>"},{"title":"showEndMenu","link":"<a href=\"global.html#showEndMenu\">showEndMenu</a>","description":"<p>Shows the end menu and populates it with objective data.</p>"},{"title":"showLevelSelectMenu","link":"<a href=\"global.html#showLevelSelectMenu\">showLevelSelectMenu</a>","description":"<p>Shows the level selection menu.</p>"},{"title":"showMainMenu","link":"<a href=\"global.html#showMainMenu\">showMainMenu</a>","description":"<p>Shows the main menu.</p>"}]}